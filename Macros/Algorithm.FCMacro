import sys
import FreeCAD
import Part
import Drawing
import TechDraw
import shutil
import importlib

# -----------------------------
# Reload modules ** for development only**
import ShapeFactory
importlib.reload(ShapeFactory)
# -----------------------------

from Cuboid import Cuboid
from Cylinder import Cylinder
from HoleInBox import HoleInBox
from Wedge import Wedge
from SemiHoleInCuboid import SemiHoleInCuboid
from QuarterHoleInCuboid import QuarterHoleInCuboid
from SemiCircle import SemiCircle
from HoleInDoor import HoleInDoor
from QuarterCircle import QuarterCircle
from HoleInWedge import HoleInWedge
from ShapeFactory import ShapeFactory

# -----------------------------------
#   Document Object IDs and Types
# -----------------------------------
fusions = []
shapes = []
FUSION = 'Fusion'
SHAPE = 'Shape'

# Create id for the document object type and add it to the respective list
def generateID(objectType): 
	if objectType == FUSION:
		id = FUSION + str(len(fusions)+1 )
		fusions.append(id)
	return id

# -------------------------
#   Fusion
# -------------------------

def fusePart(doc, fuseID, baseID, toolID):
	doc.addObject("Part::Fuse", fuseID)
	doc.getObject(fuseID).Base = doc.getObject(baseID)
	doc.getObject(fuseID).Tool = doc.getObject(toolID)

def fuseCut(doc, fuseID, baseID, toolID):
	doc.addObject("Part::Cut", fuseID)
	doc.getObject(fuseID).Base = doc.getObject(baseID)
	doc.getObject(fuseID).Tool = doc.getObject(toolID)

def right(doc, base, new, unit, k):
	doc.getObject(new).Placement = FreeCAD.Placement(App.Vector(k*unit, 0, 0), App.Rotation(0,0,0))	
	id = generateID(FUSION) 
	fusePart(doc, id, base, new)
	return id

def behind(doc, base, new, unit, k):
	doc.getObject(new).Placement = FreeCAD.Placement(App.Vector(0, k*unit, 0), App.Rotation(0,0,0))	
	id = generateID(FUSION) 
	fusePart(doc, id, base, new)
	return id

def top(doc, base, new, unit, k):
	doc.getObject(new).Placement = FreeCAD.Placement(App.Vector(0, 0, k*unit), App.Rotation(0,0,0))	
	id = generateID(FUSION) 
	fusePart(doc, id, base, new)
	return id

def algo(doc, n):
	shapes = []
	columns = []
	layers = []
	unit = 100

	factory = ShapeFactory(doc, unit)
	for i in range(n*n*n):
		randomShape = factory.generateRandomShape()
		shapes.append(randomShape.id)
	print(shapes)
	
	for i in range(0, n*n*n, n):
		shape = shapes[i]
		for j in range(1, n):
			shape = right(doc, shape, shapes[i + j], unit, j)
		columns.append(shape)
	
	for i in range (0, n*n, n):
		column = columns[i]
		for j in range(1, n):	
			column = behind(doc, column, columns[i + j], unit, j)
		layers.append(column)
	
	final = layers[0]
	for i in range (1, n):
		final = top(doc, final, layers[i], unit, i)
	
	return final


def place(doc, id, t, r):
	doc.getObject(id).Placement = FreeCAD.Placement(App.Vector(t[0], t[1], t[2]), App.Rotation(r[0], r[1], r[2]))

# -------------------------
#   Generate Drawings
# -------------------------

def draw(doc, templatePath, shapeID):
	shape = doc.getObject(shapeID)

	# Insert a Page object and assign a template
	page = doc.addObject('TechDraw::DrawPage', 'Isometric')
	template = doc.addObject('TechDraw::DrawSVGTemplate','Template')
	template.Template = templatePath
	page.Template = doc.Template
	
	# Create a third view on the same object but isometric view
	viewIso = doc.addObject('TechDraw::DrawViewPart','ViewIso')
	page.addView(viewIso)
	doc.ViewIso.Source = [shape]
	doc.ViewIso.Direction = (1.0,-1.0,1.0)
	doc.ViewIso.X = 120.0
	doc.ViewIso.Y = 150.0
	doc.ViewIso.Scale = 0.3
	doc.ViewIso.Rotation = 0.0
	doc.ViewIso.HardHidden = False 
	
	# Insert a Page object and assign a template
	page2 = doc.addObject('TechDraw::DrawPage', 'Orthographic')
	page2.Template = FreeCAD.ActiveDocument.Template
	
	# Create a view on the Shape object, define the position and scale and assign it to a Page
	# Front View
	frontView = doc.addObject('TechDraw::DrawViewPart','FrontView')
	page2.addView(frontView)
	doc.FrontView.Source = [shape]
	doc.FrontView.HardHidden=True
	doc.FrontView.Direction = (0.0,-1.0,0.0)
	doc.FrontView.X = 100.0
	doc.FrontView.Y = 120.0
	doc.FrontView.Scale = 0.3
	doc.FrontView.Rotation = 0.0

	# Create a second view on the same object but this time the view is rotated by 90 degrees.
	# Right View
	rightView = doc.addObject('TechDraw::DrawViewPart','RightView')
	page2.addView(rightView)
	doc.RightView.Source = [shape]    
	doc.RightView.HardHidden=True
	doc.RightView.Direction = (1.0,0.0,0.0)
	doc.RightView.X = 200.0
	doc.RightView.Y = 120.0
	doc.RightView.Scale = 0.3
	doc.RightView.Rotation = 00.0

	# Create a second view on the same object but this time the view is rotated by 90 degrees.
	# Top View
	topView = doc.addObject('TechDraw::DrawViewPart','TopView')
	page2.addView(topView)
	doc.TopView.Source = [shape]
	doc.TopView.HardHidden=True
	doc.TopView.Direction = (0.0,0.0,1.0)
	doc.TopView.X = 100.0
	doc.TopView.Y = 230.0
	doc.TopView.Scale = 0.3
	doc.TopView.Rotation = 0.0

# -------------------------
#   Exports
# -------------------------

# Will not work for macros

def exportDrawing(path):
    drawingSVGPath = doc.Page.PageResult
    shutil.copyfile(drawingSVGPath, path)

def exportFreeCAD(doc, path):
    doc.saveAs(path)

# -------------   Main    -------------
doc = FreeCAD.newDocument()
finalObjectID = algo(doc, 3)
draw(doc, 'Templates/A1_Landscape_plain.svg', finalObjectID)
doc.recompute()


