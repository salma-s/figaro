import sys
import FreeCAD
import Part
import Drawing
import TechDraw
import shutil
import importlib

# -----------------------------
# Reload modules ** for development only**
import ShapeFactory
importlib.reload(ShapeFactory)
# -----------------------------

from Draw import Draw
from Cuboid import Cuboid
from Cylinder import Cylinder
from HoleInBox import HoleInBox
from Wedge import Wedge
from SemiHoleInCuboid import SemiHoleInCuboid
from QuarterHoleInCuboid import QuarterHoleInCuboid
from SemiCircle import SemiCircle
from HoleInDoor import HoleInDoor
from QuarterCircle import QuarterCircle
from HoleInWedge import HoleInWedge
from ShapeFactory import ShapeFactory

# -----------------------------------
#   Document Object IDs and Types
# -----------------------------------
fusions = []
shapes = []
FUSION = 'Fusion'
SHAPE = 'Shape'

# Create id for the document object type and add it to the respective list
def generateID(objectType): 
	if objectType == FUSION:
		id = FUSION + str(len(fusions)+1 )
		fusions.append(id)
	return id

# -------------------------
#   Fusion
# -------------------------

def fusePart(doc, fuseID, baseID, toolID):
	doc.addObject("Part::Fuse", fuseID)
	doc.getObject(fuseID).Base = doc.getObject(baseID)
	doc.getObject(fuseID).Tool = doc.getObject(toolID)

def fuseCut(doc, fuseID, baseID, toolID):
	doc.addObject("Part::Cut", fuseID)
	doc.getObject(fuseID).Base = doc.getObject(baseID)
	doc.getObject(fuseID).Tool = doc.getObject(toolID)

def right(doc, base, new, unit, k):
	doc.getObject(new).Placement = FreeCAD.Placement(App.Vector(k*unit, 0, 0), App.Rotation(0,0,0))	
	id = generateID(FUSION) 
	fusePart(doc, id, base, new)
	return id

def behind(doc, base, new, unit, k):
	doc.getObject(new).Placement = FreeCAD.Placement(App.Vector(0, k*unit, 0), App.Rotation(0,0,0))	
	id = generateID(FUSION) 
	fusePart(doc, id, base, new)
	return id

def top(doc, base, new, unit, k):
	doc.getObject(new).Placement = FreeCAD.Placement(App.Vector(0, 0, k*unit), App.Rotation(0,0,0))	
	id = generateID(FUSION) 
	fusePart(doc, id, base, new)
	return id

def algo(doc, n):
	shapes = []
	columns = []
	layers = []
	unit = 100

	factory = ShapeFactory(doc, unit)
	for i in range(n*n*n):
		randomShape = factory.generateRandomShape()
		shapes.append(randomShape.id)
	print(shapes)
	
	for i in range(0, n*n*n, n):
		shape = shapes[i]
		for j in range(1, n):
			shape = right(doc, shape, shapes[i + j], unit, j)
		columns.append(shape)
	
	for i in range (0, n*n, n):
		column = columns[i]
		for j in range(1, n):	
			column = behind(doc, column, columns[i + j], unit, j)
		layers.append(column)
	
	final = layers[0]
	for i in range (1, n):
		final = top(doc, final, layers[i], unit, i)
	
	return final


def place(doc, id, t, r):
	doc.getObject(id).Placement = FreeCAD.Placement(App.Vector(t[0], t[1], t[2]), App.Rotation(r[0], r[1], r[2]))

# -------------------------
#   Exports
# -------------------------

# Will not work for macros

def exportDrawing(path):
    drawingSVGPath = doc.Page.PageResult
    shutil.copyfile(drawingSVGPath, path)

def exportFreeCAD(doc, path):
    doc.saveAs(path)

# -------------   Main    -------------
doc = FreeCAD.newDocument()
finalObjectID = algo(doc, 2)
Draw(doc, 'Templates/A1_Landscape_plain.svg', finalObjectID)
doc.recompute()


